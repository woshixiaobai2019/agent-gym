[
    {
      "query": "统计workspace目录下所有.txt文件里字母'R'（大小写）的总出现次数，将结果写入result.txt文件中(最终结果只写数字)",
      "env": "# 创建workspace目录和测试文件\nimport os\nos.makedirs('workspace', exist_ok=True)\nwith open('workspace/file1.txt', 'w') as f:\n    f.write('Hello World! This is a Test file with R and r characters.')\nwith open('workspace/file2.txt', 'w') as f:\n    f.write('Another file with more R characters: RRR, rrr, Research.')\nwith open('workspace/data.txt', 'w') as f:\n    f.write('Data file: Processing Records, Results, Reports.')\nwith open('workspace/readme.md', 'w') as f:\n    f.write('This is markdown, not txt file: RRR')",
      "verify": "# 验证结果\ntry:\n    # 读取agent的结果\n    with open('result.txt', 'r') as f:\n        agent_result = f.read().strip()\n    \n    # 用代码计算正确答案\n    import os, glob\n    total_count = 0\n    txt_files = glob.glob('workspace/*.txt')\n    for txt_file in txt_files:\n        with open(txt_file, 'r') as f:\n            content = f.read()\n        total_count += content.count('R') + content.count('r')\n    \n    # 比较结果\n    result = int(agent_result) if agent_result.isdigit() else -1\n    success = (result == total_count)\nexcept:\n    success = False"
    },
    {
      "query": "分析当前目录下logs文件里的access.log文件，统计每个IP地址的访问次数，将访问次数最多的前3个IP及其次数写入top_ips.txt，每行格式：IP:次数",
      "env": "# 创建logs目录和日志文件\nimport os\nos.makedirs('logs', exist_ok=True)\nlog_content = '''192.168.1.100 - - [25/Jun/2024:10:30:15 +0000] \"GET /index.html HTTP/1.1\" 200 1234\n192.168.1.101 - - [25/Jun/2024:10:31:20 +0000] \"POST /api/data HTTP/1.1\" 201 567\n192.168.1.100 - - [25/Jun/2024:10:32:10 +0000] \"GET /about.html HTTP/1.1\" 200 890\n10.0.0.50 - - [25/Jun/2024:10:33:45 +0000] \"GET /login HTTP/1.1\" 200 445\n192.168.1.101 - - [25/Jun/2024:10:34:12 +0000] \"GET /dashboard HTTP/1.1\" 200 2341\n192.168.1.100 - - [25/Jun/2024:10:35:33 +0000] \"POST /submit HTTP/1.1\" 200 123\n10.0.0.50 - - [25/Jun/2024:10:36:18 +0000] \"GET /profile HTTP/1.1\" 200 776\n192.168.1.102 - - [25/Jun/2024:10:37:22 +0000] \"GET /help HTTP/1.1\" 200 998\n192.168.1.100 - - [25/Jun/2024:10:38:44 +0000] \"GET /logout HTTP/1.1\" 200 334\n10.0.0.50 - - [25/Jun/2024:10:39:11 +0000] \"POST /update HTTP/1.1\" 201 445'''\nwith open('logs/access.log', 'w') as f:\n    f.write(log_content)",
      "verify": "# 验证结果\ntry:\n    # 读取agent的结果\n    with open('top_ips.txt', 'r') as f:\n        agent_lines = [line.strip() for line in f.readlines() if line.strip()]\n    \n    # 用代码计算正确答案\n    import re\n    from collections import Counter\n    with open('logs/access.log', 'r') as f:\n        log_content = f.read()\n    \n    # 提取IP地址\n    ip_pattern = r'^(\\d+\\.\\d+\\.\\d+\\.\\d+)'\n    ips = re.findall(ip_pattern, log_content, re.MULTILINE)\n    ip_counts = Counter(ips)\n    \n    # 获取前3个IP\n    top_3 = ip_counts.most_common(3)\n    expected_lines = [f'{ip}:{count}' for ip, count in top_3]\n    \n    # 比较结果\n    success = len(agent_lines) == 3 and set(agent_lines) == set(expected_lines)\nexcept:\n    success = False"
    },
    {
      "query": "检查当前目录下config文件里的所有.json配置文件，找出其中\"debug\"字段为true的文件，将这些文件的文件名（不含路径）合并写入debug_configs.txt，每行一个文件名",
      "env": "# 创建配置文件\nimport os, json\nos.makedirs('config', exist_ok=True)\nconfigs = [\n    ('app.json', {'debug': False, 'port': 8080, 'host': 'localhost'}),\n    ('dev.json', {'debug': True, 'port': 3000, 'log_level': 'verbose'}),\n    ('prod.json', {'debug': False, 'port': 80, 'ssl': True}),\n    ('test.json', {'debug': True, 'port': 9999, 'mock': True}),\n    ('staging.json', {'debug': True, 'port': 4000, 'env': 'staging'})\n]\nfor filename, config in configs:\n    with open(f'config/{filename}', 'w') as f:\n        json.dump(config, f)\n# 非json文件\nwith open('config/settings.txt', 'w') as f:\n    f.write('debug=true')",
      "verify": "# 验证结果\ntry:\n    # 读取agent的结果\n    with open('debug_configs.txt', 'r') as f:\n        agent_files = set(line.strip() for line in f.readlines() if line.strip())\n    \n    # 用代码计算正确答案\n    import os, json, glob\n    debug_files = set()\n    json_files = glob.glob('config/*.json')\n    \n    for json_file in json_files:\n        try:\n            with open(json_file, 'r') as f:\n                config = json.load(f)\n            if config.get('debug') is True:\n                debug_files.add(os.path.basename(json_file))\n        except:\n            continue\n    \n    # 比较结果\n    success = agent_files == debug_files\nexcept:\n    success = False"
    },
    {
      "query": "根据students.csv文件中的学生成绩数据，计算每个学生的平均分，然后创建一个pass_list.txt文件，包含所有平均分>=60的学生姓名，按平均分从高到低排序",
      "env": "# 创建学生成绩CSV文件\ncsv_content = '''name,math,english,science,history\nAlice,85,78,92,88\nBob,45,52,48,35\nCharlie,88,91,87,94\nDiana,72,68,75,70\nEve,58,61,65,55\nFrank,91,89,94,96\nGrace,35,42,38,30'''\nwith open('students.csv', 'w') as f:\n    f.write(csv_content)",
      "verify": "# 验证结果\ntry:\n    # 读取agent的结果\n    with open('pass_list.txt', 'r') as f:\n        agent_names = [line.strip() for line in f.readlines() if line.strip()]\n    \n    # 用代码计算正确答案\n    import csv\n    students = []\n    with open('students.csv', 'r') as f:\n        reader = csv.DictReader(f)\n        for row in reader:\n            name = row['name']\n            scores = [int(row[subject]) for subject in row if subject != 'name']\n            avg = sum(scores) / len(scores)\n            if avg >= 60:\n                students.append((name, avg))\n    \n    # 按平均分降序排序\n    students.sort(key=lambda x: x[1], reverse=True)\n    expected_names = [name for name, avg in students]\n    \n    # 比较结果\n    success = agent_names == expected_names\nexcept:\n    success = False"
    },
    {
      "query": "扫描documents目录，找到所有包含关键词'TODO'的.txt文件，提取每个文件中包含TODO的行，将结果按'文件名: TODO内容'的格式写入todo_summary.txt",
      "env": "# 创建文档目录和文件\nimport os\nos.makedirs('documents', exist_ok=True)\ndocs = [\n    ('project.txt', '''Project Overview\\nThis is the main documentation.\\nTODO: Add installation instructions\\nFeatures:\\n- Feature 1\\n- Feature 2\\nTODO: Update feature list\\nConclusion'''),\n    ('meeting.txt', '''Meeting Notes - 2024-05-2\\nAttendees: John, Jane, Bob\\nDiscussion points:\\n1. Budget review\\n2. Timeline TODO: confirm with client\\n3. Next steps'''),\n    ('readme.txt', '''Regular documentation\\nNo tasks here\\nJust normal content'''),\n    ('tasks.txt', '''Daily Tasks\\nTODO: Review pull requests\\nCompleted:\\n- Fixed bug #123\\nTODO: Update documentation''')\n]\nfor filename, content in docs:\n    with open(f'documents/{filename}', 'w') as f:\n        f.write(content)\n# 非txt文件\nwith open('documents/notes.md', 'w') as f:\n    f.write('TODO: This should not be included')",
      "verify": "# 验证结果\ntry:\n    # 读取agent的结果\n    with open('todo_summary.txt', 'r') as f:\n        agent_content = f.read().strip()\n    \n    # 用代码计算正确答案\n    import os, glob\n    expected_lines = []\n    txt_files = glob.glob('documents/*.txt')\n    \n    for txt_file in txt_files:\n        filename = os.path.basename(txt_file)\n        with open(txt_file, 'r') as f:\n            lines = f.readlines()\n        \n        for line in lines:\n            line = line.strip()\n            if 'TODO' in line:\n                expected_lines.append(f'{filename}: {line}')\n    \n    expected_content = '\\n'.join(sorted(expected_lines))\n    agent_lines_sorted = '\\n'.join(sorted(agent_content.split('\\n')))\n    \n    # 比较结果\n    success = agent_lines_sorted == expected_content\nexcept:\n    success = False"
    },
    {
      "query": "分析data目录下的sales.json文件，统计每个产品的总销售额，找出销售额最高的3个产品，将结果写入top_products.txt，格式：产品名:销售额",
      "env": "# 创建sales数据\nimport os, json\nos.makedirs('data', exist_ok=True)\nsales_data = {\n    'sales_records': [\n        {'product': 'Laptop', 'quantity': 5, 'price': 1200, 'date': '2024-06-01'},\n        {'product': 'Mouse', 'quantity': 20, 'price': 25, 'date': '2024-06-01'},\n        {'product': 'Keyboard', 'quantity': 15, 'price': 80, 'date': '2024-06-02'},\n        {'product': 'Laptop', 'quantity': 3, 'price': 1200, 'date': '2024-06-02'},\n        {'product': 'Monitor', 'quantity': 8, 'price': 300, 'date': '2024-06-03'},\n        {'product': 'Mouse', 'quantity': 30, 'price': 25, 'date': '2024-06-03'},\n        {'product': 'Keyboard', 'quantity': 10, 'price': 80, 'date': '2024-06-04'},\n        {'product': 'Laptop', 'quantity': 2, 'price': 1200, 'date': '2024-06-05'},\n        {'product': 'Monitor', 'quantity': 5, 'price': 300, 'date': '2024-06-05'}\n    ]\n}\nwith open('data/sales.json', 'w') as f:\n    json.dump(sales_data, f, indent=2)",
      "verify": "# 验证结果\ntry:\n    # 读取agent的结果\n    with open('top_products.txt', 'r') as f:\n        agent_lines = [line.strip() for line in f.readlines() if line.strip()]\n    \n    # 用代码计算正确答案\n    import json\n    from collections import defaultdict\n    \n    with open('data/sales.json', 'r') as f:\n        sales_data = json.load(f)\n    \n    product_sales = defaultdict(int)\n    for record in sales_data['sales_records']:\n        total = record['quantity'] * record['price']\n        product_sales[record['product']] += total\n    \n    # 获取前3个产品\n    top_3 = sorted(product_sales.items(), key=lambda x: x[1], reverse=True)[:3]\n    expected_lines = [f'{product}:{sales}' for product, sales in top_3]\n    \n    # 比较结果\n    success = len(agent_lines) == 3 and set(agent_lines) == set(expected_lines)\nexcept:\n    success = False"
    }
  ]